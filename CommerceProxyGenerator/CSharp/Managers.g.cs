// <auto-generated />
namespace Contoso.Commerce.RetailProxy.Extension
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.IO;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.Dynamics.Commerce.RetailProxy;
    
    /// <summary>
    /// Class implements Store Operations Manager.
    /// </summary>
    [GeneratedCodeAttribute("Contoso.Commerce.RetailProxy.Extension", "1.0")]
    internal class StoreOperationsManager : IStoreOperationsManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoreOperationsManager"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public StoreOperationsManager(IContext context)
        {
            this.context = context;
        }
    
        
        /// <summary>
        /// SimplePingPost method.
        /// </summary>
        /// <returns>bool object.</returns>
        public async Task<bool> SimplePingPost()
        {       
            return await this.context.ExecuteOperationSingleResultAsync<bool>(
                "",
                "StoreOperations",
                "SimplePingPost",
                true, null);
        }
        
        /// <summary>
        /// SimplePingGet method.
        /// </summary>
        /// <returns>bool object.</returns>
        public async Task<bool> SimplePingGet()
        {       
            return await this.context.ExecuteOperationSingleResultAsync<bool>(
                "",
                "StoreOperations",
                "SimplePingGet",
                false, null);
        }
        
    }
    
    /// <summary>
    /// Class implements ExampleEntity Manager.
    /// </summary>
    [GeneratedCodeAttribute("Contoso.Commerce.RetailProxy.Extension", "1.0")]
    internal class ExampleEntityManager : IExampleEntityManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExampleEntity"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public ExampleEntityManager(IContext context)
        {
            this.context = context;
        }

        /// <summary>
        /// Creates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity after creation.</returns>
        public async Task<ExampleEntity> Create(ExampleEntity entity)
        {
            return await this.context.Create<ExampleEntity>("BoundController", entity);
        }

        /// <summary>
        /// Reads the entity with specified identifier.
        /// </summary>
        /// <param name="unusualEntityId">The unusualEntityId.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The entity.</returns>
        public async Task<ExampleEntity> Read(long unusualEntityId, ICollection<string> expandProperties = null)
        {
            return await this.context.Read<ExampleEntity>(
                    "BoundController",
                    e => e.UnusualEntityId == unusualEntityId,
                    expandProperties,
                    OperationParameter.Create("UnusualEntityId", unusualEntityId, true));
        }
      
        /// <summary>
        /// Read all entities with specified query settings.
        /// </summary>
        /// <param name="queryResultSettings">The query result settings.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The collection of entities.</returns>
        public async Task<PagedResult<ExampleEntity>> ReadAll(QueryResultSettings queryResultSettings, ICollection<string> expandProperties = null)
        {
            return await this.context.ReadAll<ExampleEntity>("BoundController", expandProperties, queryResultSettings);
        }

        /// <summary>
        /// Updates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity.</returns>
        public async Task<ExampleEntity> Update(ExampleEntity entity)
        {
            return await this.context.Update<ExampleEntity>("BoundController", entity);
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>No return.</returns>
        public async Task Delete(ExampleEntity entity)
        {
            await this.context.Delete<ExampleEntity>("BoundController", entity);
        }
        
        // Operations
        
        /// <summary>
        /// CreateExampleEntity method.
        /// </summary>
        /// <param name="entityData">The entityData.</param>
        /// <returns>long object.</returns>
        public async Task<long> CreateExampleEntity(ExampleEntity entityData)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<long>(
                "BoundController",
                "ExampleEntity",
                "CreateExampleEntity",
                true, null, OperationParameter.Create("entityData", entityData, false));
        }
        
        /// <summary>
        /// UpdateExampleEntity method.
        /// </summary>
        /// <param name="unusualEntityId">The unusualEntityId.</param>
        /// <param name="updatedEntity">The updatedEntity.</param>
        /// <returns>bool object.</returns>
        public async Task<bool> UpdateExampleEntity(long unusualEntityId, ExampleEntity updatedEntity)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<bool>(
                "BoundController",
                "ExampleEntity",
                "UpdateExampleEntity",
                true, null, OperationParameter.Create("UnusualEntityId", unusualEntityId, true),
                OperationParameter.Create("updatedEntity", updatedEntity, false));
        }
        
        /// <summary>
        /// DeleteExampleEntity method.
        /// </summary>
        /// <param name="unusualEntityId">The unusualEntityId.</param>
        /// <returns>bool object.</returns>
        public async Task<bool> DeleteExampleEntity(long unusualEntityId)
        {       
            return await this.context.ExecuteOperationSingleResultAsync<bool>(
                "BoundController",
                "ExampleEntity",
                "DeleteExampleEntity",
                true, null, OperationParameter.Create("UnusualEntityId", unusualEntityId, true));
        }
        
        /// <summary>
        /// GetAllExampleEntities method.
        /// </summary>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of ExampleEntity.</returns>
        public async Task<PagedResult<ExampleEntity>> GetAllExampleEntities(QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<ExampleEntity>(
                "BoundController",
                "ExampleEntity",
                "GetAllExampleEntities",
                false, queryResultSettings, null);
        }
        
    }
    
    /// <summary>
    /// Class implements LATCOBasicDocumentTypeEntity Manager.
    /// </summary>
    [GeneratedCodeAttribute("Contoso.Commerce.RetailProxy.Extension", "1.0")]
    internal class LATCOBasicDocumentTypeEntityManager : ILATCOBasicDocumentTypeEntityManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="LATCOBasicDocumentTypeEntity"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public LATCOBasicDocumentTypeEntityManager(IContext context)
        {
            this.context = context;
        }

        /// <summary>
        /// Creates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity after creation.</returns>
        public async Task<LATCOBasicDocumentTypeEntity> Create(LATCOBasicDocumentTypeEntity entity)
        {
            return await this.context.Create<LATCOBasicDocumentTypeEntity>("LATCOBasicDocumentTypeBoundController", entity);
        }

        /// <summary>
        /// Reads the entity with specified identifier.
        /// </summary>
        /// <param name="unusualEntityId">The unusualEntityId.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The entity.</returns>
        public async Task<LATCOBasicDocumentTypeEntity> Read(long unusualEntityId, ICollection<string> expandProperties = null)
        {
            return await this.context.Read<LATCOBasicDocumentTypeEntity>(
                    "LATCOBasicDocumentTypeBoundController",
                    e => e.UnusualEntityId == unusualEntityId,
                    expandProperties,
                    OperationParameter.Create("UnusualEntityId", unusualEntityId, true));
        }
      
        /// <summary>
        /// Read all entities with specified query settings.
        /// </summary>
        /// <param name="queryResultSettings">The query result settings.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The collection of entities.</returns>
        public async Task<PagedResult<LATCOBasicDocumentTypeEntity>> ReadAll(QueryResultSettings queryResultSettings, ICollection<string> expandProperties = null)
        {
            return await this.context.ReadAll<LATCOBasicDocumentTypeEntity>("LATCOBasicDocumentTypeBoundController", expandProperties, queryResultSettings);
        }

        /// <summary>
        /// Updates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity.</returns>
        public async Task<LATCOBasicDocumentTypeEntity> Update(LATCOBasicDocumentTypeEntity entity)
        {
            return await this.context.Update<LATCOBasicDocumentTypeEntity>("LATCOBasicDocumentTypeBoundController", entity);
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>No return.</returns>
        public async Task Delete(LATCOBasicDocumentTypeEntity entity)
        {
            await this.context.Delete<LATCOBasicDocumentTypeEntity>("LATCOBasicDocumentTypeBoundController", entity);
        }
        
        // Operations
        
        /// <summary>
        /// GetAllLATCOBasicDocumentTypeEntities method.
        /// </summary>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of LATCOBasicDocumentTypeEntity.</returns>
        public async Task<PagedResult<LATCOBasicDocumentTypeEntity>> GetAllLATCOBasicDocumentTypeEntities(QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<LATCOBasicDocumentTypeEntity>(
                "LATCOBasicDocumentTypeBoundController",
                "LATCOBasicDocumentTypeEntity",
                "GetAllLATCOBasicDocumentTypeEntities",
                false, queryResultSettings, null);
        }
        
    }
    
 }
